{"version":3,"sources":["src/Node.js","src/Nested.js","index.js"],"names":["PRIVATE_PROPERTIES","Node","node","tree_instance","_properties","_mapProperties","_tree_instance","key","undefined","defaultValue","value","getProperty","getTree","options","properties","node_id","parent_id","prev_id","next_id","children_key","instance","getPreviousNodes","getPreviousNode","getNextNodes","getNextNode","getParentNode","getSiblingsNodes","getBreadcrumb","reverse","hasChildNodes","children","childNodes","length","index","Boolean","getParentId","getPreviousId","getNextId","property_name","hasOwnProperty","includes","module","exports","require","DEFAULT_OPTIONS","node_id_prefix","Nested","data","Object","assign","buildTree","currentNode","id","getId","i","retrieveNode","nodes","hasProperty","push","concat","retrieveNodesBy","constructor","String","previousNodes","previousNode","nextNodes","nextNode","breadcrumb","parentid","count","tree","reduce","acc","setProperty","Math","floor","random","hasPreviousNode","hasNextNode"],"mappings":"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","file":"Nested.min.map","sourceRoot":"..","sourcesContent":["const PRIVATE_PROPERTIES = ['__nodeid', '__parentid', '__nextid', '__previd', '__tree']\n\nclass Node {\n\n    /**\n     * @param {Object} node\n     */\n    constructor(node = {}, tree_instance = null) {\n        this._properties = this._mapProperties(node)\n        this._tree_instance = tree_instance\n    }\n\n    /**\n     * Return node properties\n     * @returns {Object}\n     */\n    get properties() {\n        return this._properties\n    }\n\n    /**\n     * Check if node property exists\n     * @param {String} key\n     * @returns {boolean}\n     */\n    hasProperty(key) {\n        return this._properties[key] !== undefined\n    }\n\n    /**\n     * Returns node property if exists, defaultValue otherwise\n     * @param {String} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getProperty(key, defaultValue = null) {\n        return this._properties[key] || defaultValue\n    }\n\n    /**\n     * Set node property\n     * @param {String} key\n     * @param {*} value\n     */\n    setProperty(key, value) {\n        this._properties[key] = value\n    }\n\n    /**\n     * Returns node unique id\n     * @returns {String}\n     */\n    getId() {\n        return this.getProperty(this.getTree().options.properties.node_id)\n    }\n\n    /**\n     * Returns node parent unique id\n     * @returns {String|null}\n     */\n    getParentId() {\n        return this.getProperty(this.getTree().options.properties.parent_id)\n    }\n\n    /**\n     * Returns previous node unique id\n     * @returns {String|null}\n     */\n    getPreviousId() {\n        return this.getProperty(this.getTree().options.properties.prev_id)\n    }\n\n    /**\n     * Returns next node unique id\n     * @returns {String|null}\n     */\n    getNextId() {\n        return this.getProperty(this.getTree().options.properties.next_id)\n    }\n\n    /**\n     * Returns an array of child nodes\n     * @returns {Node[]}\n     */\n    childNodes() {\n        return this.getProperty(this.getTree().options.properties.children_key, [])\n    }\n\n    /**\n     * Returns an array of previous nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    previousNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNodes(this) : null\n    }\n\n    /**\n     * Returns previous node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    previousNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNode(this) : null\n    }\n\n    /**\n     * Returns an array of next nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    nextNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNodes(this) : null\n    }\n\n    /**\n     * Returns next node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nextNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNode(this) : null\n    }\n\n    /**\n     * Returns parent node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    parentNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getParentNode(this) : null\n    }\n\n    /**\n     * Returns an array of siblings nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    siblingsNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getSiblingsNodes(this) : null\n    }\n\n    /**\n     * Returns Nested instance\n     * @returns {Nested|null}\n     */\n    getTree() {\n        return this._tree_instance || null\n    }\n\n    /**\n     * Returns current node breadcrumb\n     * @returns {Node[]|Array}\n     */\n    breadcrumb() {\n        let instance = this.getTree()\n        if (instance !== null)\n            return instance.getBreadcrumb(this).reverse()\n        return []\n    }\n\n    /**\n     * Returns node first child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    firstChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[0] : null\n    }\n\n    /**\n     * Returns node last child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    lastChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[children.length - 1] : null\n    }\n\n    /**\n     * Returns node child by index if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nthChild(index) {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[index] : null\n    }\n\n    /**\n     * Count node childs\n     * @returns {Number}\n     */\n    countChildren() {\n        if (!this.hasChildNodes()) return 0\n        return this.childNodes().length\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasChildNodes() {\n        const children = this.childNodes()\n        return Boolean(children !== undefined && children !== null && children.length > 0)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasParentNode() {\n        return Boolean(this.getParentId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasPreviousNode() {\n        return Boolean(this.getPreviousId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasNextNode() {\n        return Boolean(this.getNextId() !== null)\n    }\n\n    /**\n     * Map node properties\n     * @param {Object} properties\n     * @returns {Object}\n     * @private\n     */\n    _mapProperties(properties) {\n        for (let property_name in properties) {\n            if (properties.hasOwnProperty(property_name)) {\n                if (!this[property_name] && !PRIVATE_PROPERTIES.includes(property_name))\n                    this[property_name] = properties[property_name]\n            }\n        }\n        return properties\n    }\n\n}\n\nmodule.exports = Node","const Node = require('./Node')\nconst DEFAULT_OPTIONS = {\n    properties: {\n        node_id: '__nodeid',\n        node_id_prefix: 'node-',\n        parent_id: '__parentid',\n        prev_id: '__previd',\n        next_id: '__nextid',\n        children_key: 'children'\n    }\n}\n\nclass Nested {\n\n    /**\n     * @param {Array} data\n     * @param {Object} options\n     */\n    constructor(data = [], options = {}) {\n        this.options = Object.assign({}, DEFAULT_OPTIONS, options)\n        this.data = this.buildTree(data)\n        this.currentNode = null\n    }\n\n    /**\n     * Retrieve node by id\n     * @param {String} id\n     * @param {Array|null} data\n     * @returns {Node|null}\n     */\n    retrieveNode(id, data = null) {\n        if (this.currentNode !== null && this.currentNode.getId() === id)\n            return this.currentNode\n\n        if (data === null) {\n            data = this.data\n            this.currentNode = null\n        }\n\n        let node = null\n        for (let i = 0; i < data.length; i++) {\n            node = data[i]\n            if (node.getId() === id) {\n                this.currentNode = node\n                break\n            }\n            else if (node.hasChildNodes()) {\n                node = this.retrieveNode(id, node.childNodes())\n            } else node = null\n        }\n        return this.currentNode\n    }\n\n    /**\n     * Retrieve nodes by key-value couple\n     * @param {String} key\n     * @param {*|null|undefined} value\n     * @param {Array} data\n     * @returns {Node[]|[]}\n     */\n    retrieveNodesBy(key, value, data = null) {\n        data = data || this.data\n        let nodes = []\n        for (let i = 0; i < data.length; i++) {\n            let node = data[i]\n            if (node.hasProperty(key) && node.getProperty(key) === value) nodes.push(node)\n            if (node.hasChildNodes())\n                nodes = nodes.concat(this.retrieveNodesBy(key, value, node.childNodes()))\n        }\n        return nodes\n    }\n\n    /**\n     * Retrieve node parent\n     * @param {Node|String} node\n     * @returns {Node|null}\n     */\n    getParentNode(node) {\n        const id = node.constructor === Node ? node.getParentId() : node\n        return this.retrieveNode(id)\n    }\n\n    /**\n     * Retrieve node siblings\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getSiblingsNodes(node) {\n        return [].concat(this.getPreviousNodes(node), this.getNextNodes(node))\n    }\n\n    /**\n     * Retrieve previous nodes by id\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getPreviousNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let previousNodes = []\n        if (node !== null && node.getPreviousId() !== null) {\n            previousNodes.push(node.previousNode())\n            previousNodes = previousNodes.concat(this.getPreviousNodes(node.getPreviousId()))\n        }\n        return previousNodes\n    }\n\n    /**\n     * Retrieve previous node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getPreviousNode(node) {\n        const id = node.constructor === Node ? node.getPreviousId() : node\n        return id !== null ? this.retrieveNode(id) : null\n    }\n\n    /**\n     * Retrieve node next nodes\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getNextNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let nextNodes = []\n        if (node !== null && node.getNextId() !== null) {\n            nextNodes.push(node.nextNode())\n            nextNodes = nextNodes.concat(this.getNextNodes(node.getNextId()))\n        }\n        return nextNodes\n    }\n\n    /**\n     * Retrieve next node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getNextNode(node) {\n        const id = node.constructor === Node ? node.getNextId() : node\n        return id !== null ? this.retrieveNode(id) : null\n    }\n\n    /**\n     * Retrieve node breadcrumb\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getBreadcrumb(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let breadcrumb = []\n        breadcrumb.push(node)\n        if (node.getParentId() !== null)\n            breadcrumb = breadcrumb.concat(this.getBreadcrumb(node.getParentId()))\n        return breadcrumb\n    }\n\n    /**\n     * @param {Array} data\n     * @param {String|null} parentid\n     * @returns {Node[]}\n     */\n    buildTree(data = [], parentid = null) {\n        if (!this.count) this.count = 0\n        let tree = data.reduce((acc, node) => {\n            this.count += 1\n            if (node.constructor !== Node)\n                node = new Node(node, this)\n            node.setProperty(this.options.properties.node_id, `${this.options.properties.node_id_prefix}${this.count * Math.floor((Math.random() * 10000) + 1)}`)\n            node.setProperty(this.options.properties.parent_id, parentid)\n            if (node.hasChildNodes())\n                node.setProperty(this.options.properties.children_key, this.buildTree(node.childNodes(), node.getId()))\n            acc.push(node)\n            return acc\n        }, [])\n        for (let i = 0; i < tree.length; i++) {\n            let hasPreviousNode = tree[i - 1] !== undefined && tree[i - 1].constructor === Node\n            let hasNextNode = tree[i + 1] !== undefined && tree[i + 1].constructor === Node\n            tree[i].setProperty(this.options.properties.prev_id, hasPreviousNode ? tree[i - 1].getId() : null)\n            tree[i].setProperty(this.options.properties.next_id, hasNextNode ? tree[i + 1].getId() : null)\n        }\n        return tree\n    }\n\n}\n\nmodule.exports = Nested","module.exports = require('./src/Nested')\n"]}