{"version":3,"sources":["src/Node.js","src/Nested.js","index.js"],"names":["PRIVATE_PROPERTIES","Node","node","_properties","_mapProperties","key","undefined","defaultValue","value","getProperty","instance","getTree","getPreviousNodes","getPreviousNode","getNextNodes","getNextNode","getParentNode","getSiblingsNodes","getBreadcrumb","reverse","hasChildNodes","children","childNodes","length","index","Boolean","getParentId","getPreviousId","getNextId","properties","property_name","hasOwnProperty","includes","Nested","data","buildTree","currentNode","parentNode","prevNode","nextNode","id","getId","i","setProperty","retrieveNode","reduce","acc","hasProperty","push","concat","retrieveNodesBy","constructor","String","previousNodes","previousNode","nextNodes","breadcrumb","parentid","count","module","exports","require"],"mappings":"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","file":"nested.fc1b4c44.map","sourceRoot":"..","sourcesContent":["const PRIVATE_PROPERTIES = ['__nodeid', '__parentid', '__nextid', '__previd', '__tree']\n\nexport default class Node {\n\n    /**\n     * @param {Object} node\n     */\n    constructor(node = {}) {\n        this._properties = this._mapProperties(node)\n    }\n\n    /**\n     * Return node properties\n     * @returns {Object}\n     */\n    get properties() {\n        return this._properties\n    }\n\n    /**\n     * Check if node property exists\n     * @param {String} key\n     * @returns {boolean}\n     */\n    hasProperty(key) {\n        return this._properties[key] !== undefined\n    }\n\n    /**\n     * Returns node property if exists, defaultValue otherwise\n     * @param {String} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getProperty(key, defaultValue = null) {\n        return this._properties[key] || defaultValue\n    }\n\n    /**\n     * Set node property\n     * @param {String} key\n     * @param {*} value\n     */\n    setProperty(key, value) {\n        this._properties[key] = value\n    }\n\n    /**\n     * Returns node unique id\n     * @returns {String}\n     */\n    getId() {\n        return this.getProperty('__nodeid')\n    }\n\n    /**\n     * Returns node parent unique id\n     * @returns {String|null}\n     */\n    getParentId() {\n        return this.getProperty('__parentid')\n    }\n\n    /**\n     * Returns next node unique id\n     * @returns {String|null}\n     */\n    getNextId() {\n        return this.getProperty('__nextid')\n    }\n\n    /**\n     * Returns previous node unique id\n     * @returns {String|null}\n     */\n    getPreviousId() {\n        return this.getProperty('__previd')\n    }\n\n    /**\n     * Returns an array of child nodes\n     * @returns {Node[]}\n     */\n    childNodes() {\n        return this.getProperty('children', [])\n    }\n\n    /**\n     * Returns an array of previous nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    previousNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNodes(this) : null\n    }\n\n    /**\n     * Returns previous node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    previousNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNode(this) : null\n    }\n\n    /**\n     * Returns an array of next nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    nextNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNodes(this) : null\n    }\n\n    /**\n     * Returns next node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nextNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNode(this) : null\n    }\n\n    /**\n     * Returns parent node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    parentNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getParentNode(this) : null\n    }\n\n    /**\n     * Returns siblings nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    siblingsNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getSiblingsNodes(this) : null\n    }\n\n    /**\n     * Returns Nested instance\n     * @returns {Nested|null}\n     */\n    getTree() {\n        return this.getProperty('__tree') || null\n    }\n\n    /**\n     * Returns current node breadcrumb\n     * @returns {Node[]|Array}\n     */\n    breadcrumb() {\n        let instance = this.getTree()\n        if (instance !== null)\n            return instance.getBreadcrumb(this).reverse()\n        return []\n    }\n\n    /**\n     * Returns node first child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    firstChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[0] : null\n    }\n\n    /**\n     * Returns node last child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    lastChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[children.length - 1] : null\n    }\n\n    /**\n     * Returns node child by index if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nthChild(index) {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[index] : null\n    }\n\n    /**\n     * Count node childs\n     * @returns {Number}\n     */\n    countChildren() {\n        if (!this.hasChildNodes()) return 0\n        return this.childNodes().length\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasChildNodes() {\n        const children = this.childNodes()\n        return Boolean(children !== undefined && children !== null && children.length > 0)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasParentNode() {\n        return Boolean(this.getParentId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasPreviousNode() {\n        return Boolean(this.getPreviousId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasNextNode() {\n        return Boolean(this.getNextId() !== null)\n    }\n\n    /**\n     * Map node properties\n     * @param {Object} properties\n     * @returns {Object}\n     * @private\n     */\n    _mapProperties(properties) {\n        for (let property_name in properties) {\n            if (properties.hasOwnProperty(property_name)) {\n                if (!this[property_name] && !PRIVATE_PROPERTIES.includes(property_name))\n                    this[property_name] = properties[property_name]\n            }\n        }\n        return properties\n    }\n\n}","import Node from '../src/Node'\n\nexport default class Nested {\n\n    /**\n     * @param {Array} data\n     */\n    constructor(data = []) {\n        this.data = this.buildTree(data)\n        this.currentNode = null\n        this.parentNode = null\n        this.prevNode = null\n        this.nextNode = null\n    }\n\n    /**\n     * Retrieve node by id\n     * @param {String} id\n     * @param {Array|null} data\n     * @returns {Node|null}\n     */\n    retrieveNode(id, data = null) {\n        if (this.currentNode !== null && this.currentNode.getId() === id)\n            return this.currentNode\n\n        if (data === null) {\n            data = this.data\n            this.currentNode = null\n            this.prevNode = null\n            this.nextNode = null\n        }\n\n        let node = null\n        for (let i = 0; i < data.length; i++) {\n            node = data[i]\n            if (node.getId() === id) {\n                this.prevNode = data[i - 1] || null\n                this.nextNode = data[i + 1] || null\n                node.setProperty('__previd', this.prevNode !== null ? this.prevNode.getId() : null)\n                node.setProperty('__nextid', this.nextNode !== null ? this.nextNode.getId() : null)\n                break\n            } else if (node.hasChildNodes()) {\n                node = this.retrieveNode(id, node.childNodes())\n            } else node = null\n        }\n        this.currentNode = node\n        return this.currentNode\n    }\n\n    /**\n     * Retrieve nodes by key-value couple\n     * @param {String} key\n     * @param {*|null|undefined} value\n     * @param {Array} data\n     * @returns {Node[]|[]}\n     */\n    retrieveNodesBy(key, value, data = null) {\n        return (data || this.data).reduce((acc, node) => {\n            if (node.hasProperty(key) && node.getProperty(key) === value) acc.push(node)\n            if (node.hasChildNodes())\n                acc = acc.concat(this.retrieveNodesBy(key, value, node.childNodes()))\n            return acc\n        }, [])\n    }\n\n    /**\n     * Retrieve node parent\n     * @param {Node|String} node\n     * @returns {Node|null}\n     */\n    getParentNode(node) {\n        const id = node.constructor === Node ? node.getParentId() : node\n        return this.retrieveNode(id)\n    }\n\n    /**\n     * Retrieve node siblings\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getSiblingsNodes(node) {\n        return [].concat(this.getPreviousNodes(node), this.getNextNodes(node))\n    }\n\n    /**\n     * Retrieve previous nodes by id\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getPreviousNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let previousNodes = []\n        if (node.getPreviousId() !== null) {\n            previousNodes.push(node.previousNode())\n            previousNodes = previousNodes.concat(this.getPreviousNodes(node.getPreviousId()))\n        }\n        return previousNodes\n    }\n\n    /**\n     * Retrieve previous node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getPreviousNode(node) {\n        const id = node.constructor === Node ? node.getId() : node\n        this.retrieveNode(id)\n        return this.prevNode\n    }\n\n    /**\n     * Retrieve node next nodes\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getNextNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let nextNodes = []\n        if (node.getNextId() !== null) {\n            nextNodes.push(node.nextNode())\n            nextNodes = nextNodes.concat(this.getNextNodes(node.getNextId()))\n        }\n        return nextNodes\n    }\n\n    /**\n     * Retrieve next node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getNextNode(node) {\n        const id = node.constructor === Node ? node.getId() : node\n        this.retrieveNode(id)\n        return this.nextNode\n    }\n\n    /**\n     * Retrieve node breadcrumb\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getBreadcrumb(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let breadcrumb = []\n        breadcrumb.push(node)\n        if (node.getParentId() !== null)\n            breadcrumb = breadcrumb.concat(this.getBreadcrumb(node.getParentId()))\n        return breadcrumb\n    }\n\n    /**\n     * @param {Array} data\n     * @param {String|null} parentid\n     * @returns {Node[]}\n     */\n    buildTree(data = [], parentid = null) {\n        if (!this.count) this.count = 0\n        return data.reduce((acc, node) => {\n            this.count += 1\n            if (node.constructor !== Node)\n                node = new Node(node)\n            node.setProperty('__nodeid', `node-${this.count}`)\n            node.setProperty('__parentid', parentid)\n            node.setProperty('__tree', this)\n            if (node.hasChildNodes())\n                node.setProperty('children', this.buildTree(node.childNodes(), node.getId()))\n            acc.push(node)\n            return acc\n        }, [])\n    }\n\n}","module.exports = require('./src/Nested')\n"]}