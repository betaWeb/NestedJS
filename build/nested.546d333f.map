{"version":3,"sources":["src/Node.js","src/Nested.js","index.js"],"names":["PRIVATE_PROPERTIES","Node","node","_properties","_mapProperties","key","undefined","defaultValue","value","getProperty","instance","getTree","getPreviousNodes","getPreviousNode","getNextNodes","getNextNode","getParentNode","getSiblingsNodes","getBreadcrumb","reverse","hasChildNodes","children","childNodes","length","index","Boolean","getParentId","getPreviousId","getNextId","properties","property_name","hasOwnProperty","includes","Nested","data","buildTree","currentNode","id","getId","i","prevNode","nextNode","setProperty","retrieveNode","reduce","acc","hasProperty","push","concat","retrieveNodesBy","constructor","String","previousNodes","previousNode","nextNodes","breadcrumb","parentid","count","module","exports","require"],"mappings":"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","file":"nested.546d333f.map","sourceRoot":"..","sourcesContent":["const PRIVATE_PROPERTIES = ['__nodeid', '__parentid', '__nextid', '__previd', '__tree']\n\nexport default class Node {\n\n    /**\n     * @param {Object} node\n     */\n    constructor(node = {}) {\n        this._properties = this._mapProperties(node)\n    }\n\n    /**\n     * Return node properties\n     * @returns {Object}\n     */\n    get properties() {\n        return this._properties\n    }\n\n    /**\n     * Check if node property exists\n     * @param {String} key\n     * @returns {boolean}\n     */\n    hasProperty(key) {\n        return this._properties[key] !== undefined\n    }\n\n    /**\n     * Returns node property if exists, defaultValue otherwise\n     * @param {String} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getProperty(key, defaultValue = null) {\n        return this._properties[key] || defaultValue\n    }\n\n    /**\n     * Set node property\n     * @param {String} key\n     * @param {*} value\n     */\n    setProperty(key, value) {\n        this._properties[key] = value\n    }\n\n    /**\n     * Returns node unique id\n     * @returns {String}\n     */\n    getId() {\n        return this.getProperty('__nodeid')\n    }\n\n    /**\n     * Returns node parent unique id\n     * @returns {String|null}\n     */\n    getParentId() {\n        return this.getProperty('__parentid')\n    }\n\n    /**\n     * Returns next node unique id\n     * @returns {String|null}\n     */\n    getNextId() {\n        return this.getProperty('__nextid')\n    }\n\n    /**\n     * Returns previous node unique id\n     * @returns {String|null}\n     */\n    getPreviousId() {\n        return this.getProperty('__previd')\n    }\n\n    /**\n     * Returns an array of child nodes\n     * @returns {Node[]}\n     */\n    childNodes() {\n        return this.getProperty('children', [])\n    }\n\n    /**\n     * Returns an array of previous nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    previousNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNodes(this) : null\n    }\n\n    /**\n     * Returns previous node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    previousNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getPreviousNode(this) : null\n    }\n\n    /**\n     * Returns an array of next nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    nextNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNodes(this) : null\n    }\n\n    /**\n     * Returns next node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nextNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getNextNode(this) : null\n    }\n\n    /**\n     * Returns parent node if exists, null otherwise\n     * @returns {Node|null}\n     */\n    parentNode() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getParentNode(this) : null\n    }\n\n    /**\n     * Returns an array of siblings nodes if exists, null otherwise\n     * @returns {Node[]|null}\n     */\n    siblingsNodes() {\n        let instance = this.getTree()\n        return instance !== null ? instance.getSiblingsNodes(this) : null\n    }\n\n    /**\n     * Returns Nested instance\n     * @returns {Nested|null}\n     */\n    getTree() {\n        return this.getProperty('__tree') || null\n    }\n\n    /**\n     * Returns current node breadcrumb\n     * @returns {Node[]|Array}\n     */\n    breadcrumb() {\n        let instance = this.getTree()\n        if (instance !== null)\n            return instance.getBreadcrumb(this).reverse()\n        return []\n    }\n\n    /**\n     * Returns node first child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    firstChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[0] : null\n    }\n\n    /**\n     * Returns node last child if exists, null otherwise\n     * @returns {Node|null}\n     */\n    lastChild() {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[children.length - 1] : null\n    }\n\n    /**\n     * Returns node child by index if exists, null otherwise\n     * @returns {Node|null}\n     */\n    nthChild(index) {\n        if (!this.hasChildNodes()) return null\n        const children = this.childNodes()\n        return children && children.length ? children[index] : null\n    }\n\n    /**\n     * Count node childs\n     * @returns {Number}\n     */\n    countChildren() {\n        if (!this.hasChildNodes()) return 0\n        return this.childNodes().length\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasChildNodes() {\n        const children = this.childNodes()\n        return Boolean(children !== undefined && children !== null && children.length > 0)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasParentNode() {\n        return Boolean(this.getParentId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasPreviousNode() {\n        return Boolean(this.getPreviousId() !== null)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    hasNextNode() {\n        return Boolean(this.getNextId() !== null)\n    }\n\n    /**\n     * Map node properties\n     * @param {Object} properties\n     * @returns {Object}\n     * @private\n     */\n    _mapProperties(properties) {\n        for (let property_name in properties) {\n            if (properties.hasOwnProperty(property_name)) {\n                if (!this[property_name] && !PRIVATE_PROPERTIES.includes(property_name))\n                    this[property_name] = properties[property_name]\n            }\n        }\n        return properties\n    }\n\n}","import Node from '../src/Node'\n\nexport default class Nested {\n\n    /**\n     * @param {Array} data\n     */\n    constructor(data = []) {\n        this.data = this.buildTree(data)\n        this.currentNode = null\n    }\n\n    /**\n     * Retrieve node by id\n     * @param {String} id\n     * @param {Array|null} data\n     * @returns {Node|null}\n     */\n    retrieveNode(id, data = null) {\n        if (this.currentNode !== null && this.currentNode.getId() === id)\n            return this.currentNode\n\n        if (data === null) {\n            data = this.data\n            this.currentNode = null\n        }\n\n        let node = null\n        for (let i = 0; i < data.length; i++) {\n            node = data[i]\n            if (node.getId() === id) {\n                let prevNode = data[i - 1] || null\n                let nextNode = data[i + 1] || null\n                node.setProperty('__previd', prevNode !== null ? prevNode.getId() : null)\n                node.setProperty('__nextid', nextNode !== null ? nextNode.getId() : null)\n                break\n            } else if (node.hasChildNodes()) {\n                node = this.retrieveNode(id, node.childNodes())\n            } else node = null\n        }\n        this.currentNode = node\n        return this.currentNode\n    }\n\n    /**\n     * Retrieve nodes by key-value couple\n     * @param {String} key\n     * @param {*|null|undefined} value\n     * @param {Array} data\n     * @returns {Node[]|[]}\n     */\n    retrieveNodesBy(key, value, data = null) {\n        return (data || this.data).reduce((acc, node) => {\n            if (node.hasProperty(key) && node.getProperty(key) === value) acc.push(node)\n            if (node.hasChildNodes())\n                acc = acc.concat(this.retrieveNodesBy(key, value, node.childNodes()))\n            return acc\n        }, [])\n    }\n\n    /**\n     * Retrieve node parent\n     * @param {Node|String} node\n     * @returns {Node|null}\n     */\n    getParentNode(node) {\n        const id = node.constructor === Node ? node.getParentId() : node\n        return this.retrieveNode(id)\n    }\n\n    /**\n     * Retrieve node siblings\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getSiblingsNodes(node) {\n        return [].concat(this.getPreviousNodes(node), this.getNextNodes(node))\n    }\n\n    /**\n     * Retrieve previous nodes by id\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getPreviousNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let previousNodes = []\n        if (node.getPreviousId() !== null) {\n            previousNodes.push(node.previousNode())\n            previousNodes = previousNodes.concat(this.getPreviousNodes(node.getPreviousId()))\n        }\n        return previousNodes\n    }\n\n    /**\n     * Retrieve previous node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getPreviousNode(node) {\n        const id = node.constructor === Node ? node.getPreviousId() : node\n        return id !== null ? this.retrieveNode(id) : null\n    }\n\n    /**\n     * Retrieve node next nodes\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getNextNodes(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let nextNodes = []\n        if (node.getNextId() !== null) {\n            nextNodes.push(node.nextNode())\n            nextNodes = nextNodes.concat(this.getNextNodes(node.getNextId()))\n        }\n        return nextNodes\n    }\n\n    /**\n     * Retrieve next node\n     * @param {Node|String} node\n     * @returns {Node}\n     */\n    getNextNode(node) {\n        const id = node.constructor === Node ? node.getNextId() : node\n        return id !== null ? this.retrieveNode(id) : null\n    }\n\n    /**\n     * Retrieve node breadcrumb\n     * @param {Node|String} node\n     * @returns {Array}\n     */\n    getBreadcrumb(node) {\n        if (node.constructor === String) node = this.retrieveNode(node)\n        let breadcrumb = []\n        breadcrumb.push(node)\n        if (node.getParentId() !== null)\n            breadcrumb = breadcrumb.concat(this.getBreadcrumb(node.getParentId()))\n        return breadcrumb\n    }\n\n    /**\n     * @param {Array} data\n     * @param {String|null} parentid\n     * @returns {Node[]}\n     */\n    buildTree(data = [], parentid = null) {\n        if (!this.count) this.count = 0\n        return data.reduce((acc, node) => {\n            this.count += 1\n            if (node.constructor !== Node)\n                node = new Node(node)\n            node.setProperty('__nodeid', `node-${this.count}`)\n            node.setProperty('__parentid', parentid)\n            node.setProperty('__tree', this)\n            if (node.hasChildNodes())\n                node.setProperty('children', this.buildTree(node.childNodes(), node.getId()))\n            acc.push(node)\n            return acc\n        }, [])\n    }\n\n}","module.exports = require('./src/Nested')\n"]}