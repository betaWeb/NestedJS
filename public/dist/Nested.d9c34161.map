{"version":3,"sources":["src/config.js","src/utils.js","src/Node.js","src/Nested.js"],"names":["config","properties","node_id","node_id_prefix","parent_id","root_id","prev_id","next_id","depth","module","exports","utils","isBrowser","window","undefined","document","e","isNode","retrieveContext","_context","global","getContext","context_id","__nestedjs","setContext","context","Error","uniqueid","Math","floor","randomNum","Date","clearContext","start","length","random","require","PRIVATE_PROPERTIES","Node","node","tree_uniqueid","_properties","_mapProperties","_tree_uniqueid","key","defaultValue","value","getProperty","getTree","options","children_key","instance","getPreviousNodes","getPreviousNode","getNextNodes","getNextNode","getParentNode","getRootNode","getSiblingsNodes","getBreadcrumb","reverse","hasChildNodes","children","childNodes","index","Boolean","getParentId","getPreviousId","getNextId","getRootId","property_name","hasOwnProperty","includes","DEFAULT_OPTIONS","Nested","data","Object","assign","_uniqueid","buildTree","currentNode","_count","id","_retrieveNode","_retrieveNodesBy","_retrieveNodesByDepth","constructor","retrieveNode","concat","String","previousNodes","push","previousNode","nextNodes","nextNode","breadcrumb","parentid","rootid","tree","reduce","acc","setProperty","_setUniqueId","getId","i","hasPreviousNode","hasNextNode","nodes","hasProperty","currentDepth","hasParentNode"],"mappings":"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","file":"Nested.d9c34161.map","sourceRoot":"..","sourcesContent":["let config = {\r\n    properties: {\r\n        node_id: '__nodeid',\r\n        node_id_prefix: 'node-',\r\n        parent_id: '__parentid',\r\n        root_id: '__rootid',\r\n        prev_id: '__previd',\r\n        next_id: '__nextid',\r\n        depth: '__depth'\r\n    }\r\n}\r\n\r\nmodule.exports = config","let utils = {\n\n    isBrowser() {\n        try {\n            return window !== undefined && window.document !== undefined\n        } catch(e) {\n            return false\n        }\n    },\n\n    isNode() {\n        try {\n            return module !== undefined && module.exports !== undefined\n        } catch(e) {\n            return false\n        }\n    },\n\n    retrieveContext() {\n        let _context = null\n        if (utils.isBrowser()) _context = window\n        else if (utils.isNode()) _context = global\n        return _context\n    },\n\n    getContext(context_id) {\n        if (utils.isBrowser() && window.__nestedjs)\n            return window.__nestedjs[context_id] || null\n        if (utils.isNode() && global.__nestedjs)\n            return global.__nestedjs[context_id] || null\n        return null\n    },\n\n    setContext(context) {\n        let _context = utils.retrieveContext()\n        if (_context === null || _context === undefined) throw new Error('NestedJS.setContext - no context found')\n        if (!_context.__nestedjs) _context.__nestedjs = {}\n        let uniqueid = Math.floor(utils.randomNum() * (+new Date / 1000))\n        _context.__nestedjs[uniqueid] = context\n        return uniqueid\n    },\n\n    clearContext() {\n        let _context = utils.retrieveContext()\n        if (_context === null || _context === undefined) throw new Error('NestedJS.clearContext - no context found')\n        _context.__nestedjs = {}\n    },\n\n    randomNum(start = 1, length = 10000) {\n        return Math.floor((Math.random() * length) + start)\n    }\n\n}\n\nmodule.exports = utils","const {properties} = require('./config')\r\nconst {getContext} = require('./utils')\r\nconst PRIVATE_PROPERTIES = [properties.node_id, properties.parent_id, properties.next_id, properties.prev_id, properties.depth]\r\n\r\nclass Node {\r\n\r\n    /**\r\n     * @param {Object} node\r\n     * @param {Nested|null} tree_uniqueid\r\n     */\r\n    constructor(node = {}, tree_uniqueid = null) {\r\n        this._properties = this._mapProperties(node)\r\n        this._tree_uniqueid = tree_uniqueid\r\n    }\r\n\r\n    /**\r\n     * Return node properties\r\n     * @returns {Object}\r\n     */\r\n    get properties() {\r\n        return this._properties\r\n    }\r\n\r\n    /**\r\n     * Check if node property exists\r\n     * @param {String} key\r\n     * @returns {boolean}\r\n     */\r\n    hasProperty(key) {\r\n        return this._properties[key] !== undefined\r\n    }\r\n\r\n    /**\r\n     * Returns node property if exists, defaultValue otherwise\r\n     * @param {String} key\r\n     * @param {*} defaultValue\r\n     * @returns {*}\r\n     */\r\n    getProperty(key, defaultValue = null) {\r\n        return this._properties[key] || defaultValue\r\n    }\r\n\r\n    /**\r\n     * Set node property\r\n     * @param {String} key\r\n     * @param {*} value\r\n     */\r\n    setProperty(key, value) {\r\n        this._properties[key] = value\r\n    }\r\n\r\n    /**\r\n     * Returns node unique id\r\n     * @returns {String}\r\n     */\r\n    getId() {\r\n        return this.getProperty(properties.node_id)\r\n    }\r\n\r\n    /**\r\n     * Returns node parent unique id\r\n     * @returns {String|null}\r\n     */\r\n    getParentId() {\r\n        return this.getProperty(properties.parent_id)\r\n    }\r\n\r\n    /**\r\n     * Returns previous node unique id\r\n     * @returns {String|null}\r\n     */\r\n    getPreviousId() {\r\n        return this.getProperty(properties.prev_id)\r\n    }\r\n\r\n    /**\r\n     * Returns next node unique id\r\n     * @returns {String|null}\r\n     */\r\n    getNextId() {\r\n        return this.getProperty(properties.next_id)\r\n    }\r\n\r\n    /**\r\n     * Returns root node unique id\r\n     * @returns {String|null}\r\n     */\r\n    getRootId() {\r\n        return this.getProperty(properties.root_id)\r\n    }\r\n\r\n    /**\r\n     * Returns an array of child nodes\r\n     * @returns {Node[]}\r\n     */\r\n    childNodes() {\r\n        return this.getProperty(this.getTree().options.children_key, [])\r\n    }\r\n\r\n    /**\r\n     * Returns an array of previous nodes if exists, null otherwise\r\n     * @returns {Node[]|null}\r\n     */\r\n    previousNodes() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getPreviousNodes(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns previous node if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    previousNode() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getPreviousNode(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns an array of next nodes if exists, null otherwise\r\n     * @returns {Node[]|null}\r\n     */\r\n    nextNodes() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getNextNodes(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns next node if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    nextNode() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getNextNode(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns parent node if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    parentNode() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getParentNode(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns parent node if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    rootNode() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getRootNode(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns an array of siblings nodes if exists, null otherwise\r\n     * @returns {Node[]|null}\r\n     */\r\n    siblingsNodes() {\r\n        let instance = this.getTree()\r\n        return instance !== null ? instance.getSiblingsNodes(this) : null\r\n    }\r\n\r\n    /**\r\n     * Returns Nested instance\r\n     * @returns {Nested|null}\r\n     */\r\n    getTree() {\r\n        return getContext(this._tree_uniqueid)\r\n    }\r\n\r\n    /**\r\n     * Returns current node breadcrumb\r\n     * @returns {Node[]|Array}\r\n     */\r\n    breadcrumb() {\r\n        let instance = this.getTree()\r\n        if (instance !== null)\r\n            return instance.getBreadcrumb(this).reverse()\r\n        return []\r\n    }\r\n\r\n    /**\r\n     * Returns node first child if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    firstChild() {\r\n        if (!this.hasChildNodes()) return null\r\n        const children = this.childNodes()\r\n        return children && children.length ? children[0] : null\r\n    }\r\n\r\n    /**\r\n     * Returns node last child if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    lastChild() {\r\n        if (!this.hasChildNodes()) return null\r\n        const children = this.childNodes()\r\n        return children && children.length ? children[children.length - 1] : null\r\n    }\r\n\r\n    /**\r\n     * Returns node child by index if exists, null otherwise\r\n     * @returns {Node|null}\r\n     */\r\n    nthChild(index) {\r\n        if (!this.hasChildNodes()) return null\r\n        const children = this.childNodes()\r\n        return children && children.length ? children[index] : null\r\n    }\r\n\r\n    /**\r\n     * Count node childs\r\n     * @returns {Number}\r\n     */\r\n    countChildren() {\r\n        if (!this.hasChildNodes()) return 0\r\n        return this.childNodes().length\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasChildNodes() {\r\n        const children = this.childNodes()\r\n        return Boolean(children !== undefined && children !== null && children.length > 0)\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasParentNode() {\r\n        return Boolean(this.getParentId() !== null)\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasPreviousNode() {\r\n        return Boolean(this.getPreviousId() !== null)\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasNextNode() {\r\n        return Boolean(this.getNextId() !== null)\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    hasRootNode() {\r\n        return Boolean(this.getRootId() !== null)\r\n    }\r\n\r\n    /**\r\n     * Returns node depth\r\n     * @returns {Number}\r\n     */\r\n    depth() {\r\n        return this.getProperty(properties.depth) || 0\r\n    }\r\n\r\n    /**\r\n     * Map node properties\r\n     * @param {Object} properties\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _mapProperties(properties) {\r\n        for (let property_name in properties) {\r\n            if (properties.hasOwnProperty(property_name)) {\r\n                if (!this[property_name] && !PRIVATE_PROPERTIES.includes(property_name))\r\n                    this[property_name] = properties[property_name]\r\n            }\r\n        }\r\n        return properties\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Node","const Node = require('./Node')\r\nconst {properties} = require('./config')\r\nconst {getContext, setContext, randomNum} = require('./utils')\r\nconst DEFAULT_OPTIONS = {\r\n    children_key: 'children'\r\n}\r\n\r\nclass Nested {\r\n\r\n    /**\r\n     * @param {Array} data\r\n     * @param {Object} options\r\n     */\r\n    constructor(data = [], options = {}) {\r\n        this.options = Object.assign({}, DEFAULT_OPTIONS, options)\r\n        this._uniqueid = setContext(this)\r\n        this.data = this.buildTree(data)\r\n        this.currentNode = null\r\n        return getContext(this._uniqueid)\r\n    }\r\n\r\n    /**\r\n     * Returns tree instance unique id\r\n     * @returns {String}\r\n     */\r\n    getUniqueId() {\r\n        return this._uniqueid\r\n    }\r\n\r\n    /**\r\n     * Return entire tree size (with children)\r\n     * @returns {number}\r\n     */\r\n    getTreeSize() {\r\n        return this._count || 0\r\n    }\r\n\r\n    /**\r\n     * Retrieve node by id\r\n     * @param {String} id\r\n     * @returns {Node|null}\r\n     */\r\n    retrieveNode(id) {\r\n        return this._retrieveNode(id, this.data)\r\n    }\r\n\r\n    /**\r\n     * Retrieve nodes by key-value couple\r\n     * @param {String} key\r\n     * @param {*|null|undefined} value\r\n     * @returns {Node[]|[]}\r\n     */\r\n    retrieveNodesBy(key, value) {\r\n        if (!key) return null\r\n        return this._retrieveNodesBy(key, value, this.data)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param depth\r\n     * @returns {*}\r\n     */\r\n    retrieveNodesByDepth(depth = 0) {\r\n        return this._retrieveNodesByDepth(depth, this.data)\r\n    }\r\n\r\n    /**\r\n     * Retrieve node parent\r\n     * @param {Node|String} node\r\n     * @returns {Node|null}\r\n     */\r\n    getParentNode(node) {\r\n        const id = node.constructor === Node ? node.getParentId() : node\r\n        return this.retrieveNode(id)\r\n    }\r\n\r\n    /**\r\n     * Retrieve node siblings\r\n     * @param {Node|String} node\r\n     * @returns {Array}\r\n     */\r\n    getSiblingsNodes(node) {\r\n        return [].concat(this.getPreviousNodes(node), this.getNextNodes(node))\r\n    }\r\n\r\n    /**\r\n     * Retrieve previous nodes by id\r\n     * @param {Node|String} node\r\n     * @returns {Array}\r\n     */\r\n    getPreviousNodes(node) {\r\n        if (node.constructor === String) node = this.retrieveNode(node)\r\n        let previousNodes = []\r\n        if (node !== null && node.getPreviousId() !== null) {\r\n            previousNodes.push(node.previousNode())\r\n            previousNodes = previousNodes.concat(this.getPreviousNodes(node.getPreviousId()))\r\n        }\r\n        return previousNodes\r\n    }\r\n\r\n    /**\r\n     * Retrieve previous node\r\n     * @param {Node|String} node\r\n     * @returns {Node}\r\n     */\r\n    getPreviousNode(node) {\r\n        const id = node.constructor === Node ? node.getPreviousId() : node\r\n        return id !== null ? this.retrieveNode(id) : null\r\n    }\r\n\r\n    /**\r\n     * Retrieve node next nodes\r\n     * @param {Node|String} node\r\n     * @returns {Array}\r\n     */\r\n    getNextNodes(node) {\r\n        if (node.constructor === String) node = this.retrieveNode(node)\r\n        let nextNodes = []\r\n        if (node !== null && node.getNextId() !== null) {\r\n            nextNodes.push(node.nextNode())\r\n            nextNodes = nextNodes.concat(this.getNextNodes(node.getNextId()))\r\n        }\r\n        return nextNodes\r\n    }\r\n\r\n    /**\r\n     * Retrieve node next node\r\n     * @param {Node|String} node\r\n     * @returns {Node}\r\n     */\r\n    getNextNode(node) {\r\n        const id = node.constructor === Node ? node.getNextId() : node\r\n        return id !== null ? this.retrieveNode(id) : null\r\n    }\r\n\r\n    /**\r\n     * Retrieve node root node\r\n     * @param {Node|String} node\r\n     * @returns {Node}\r\n     */\r\n    getRootNode(node) {\r\n        const id = node.constructor === Node ? node.getRootId() : node\r\n        return id !== null ? this.retrieveNode(id) : null\r\n    }\r\n\r\n    /**\r\n     * Retrieve node breadcrumb\r\n     * @param {Node|String} node\r\n     * @returns {Array}\r\n     */\r\n    getBreadcrumb(node) {\r\n        if (node.constructor === String) node = this.retrieveNode(node)\r\n        let breadcrumb = []\r\n        breadcrumb.push(node)\r\n        if (node.getParentId() !== null)\r\n            breadcrumb = breadcrumb.concat(this.getBreadcrumb(node.getParentId()))\r\n        return breadcrumb\r\n    }\r\n\r\n    /**\r\n     * @param {Array} data\r\n     * @param {String|null} parentid\r\n     * @param {String|null} rootid\r\n     * @param {Number} depth\r\n     * @returns {Node[]}\r\n     */\r\n    buildTree(data = [], parentid = null, rootid = null, depth = 0) {\r\n        let tree = data.reduce((acc, node) => {\r\n            if (node.constructor !== Node)\r\n                node = new Node(node, this._uniqueid)\r\n\r\n            node.setProperty(properties.node_id, this._setUniqueId())\r\n            node.setProperty(properties.parent_id, parentid)\r\n\r\n            if (parentid === null) {\r\n                rootid = node.getId()\r\n                depth = 0\r\n                node.setProperty(properties.root_id, null)\r\n            } else node.setProperty(properties.root_id, rootid)\r\n\r\n            node.setProperty(properties.depth, depth)\r\n\r\n            if (node.hasChildNodes())\r\n                node.setProperty(this.options.children_key, this.buildTree(node.childNodes(), node.getId(), rootid, depth += 1))\r\n\r\n            acc.push(node)\r\n\r\n            return acc\r\n        }, [])\r\n        for (let i = 0; i < tree.length; i++) {\r\n            let hasPreviousNode = tree[i - 1] !== undefined && tree[i - 1].constructor === Node\r\n            let hasNextNode = tree[i + 1] !== undefined && tree[i + 1].constructor === Node\r\n            tree[i].setProperty(properties.prev_id, hasPreviousNode ? tree[i - 1].getId() : null)\r\n            tree[i].setProperty(properties.next_id, hasNextNode ? tree[i + 1].getId() : null)\r\n        }\r\n        return tree\r\n    }\r\n\r\n    /**\r\n     * Retrieve node by id\r\n     * @param {String} id\r\n     * @param {Array|null} data\r\n     * @private\r\n     * @returns {Node|null}\r\n     */\r\n    _retrieveNode(id, data) {\r\n        if (id === undefined || id === null) return null\r\n        if (this.currentNode !== null && this.currentNode.getId() === id)\r\n            return this.currentNode\r\n\r\n        let node = null\r\n        for (let i = 0; i < data.length; i++) {\r\n            node = data[i]\r\n            if (node.getId() === id) {\r\n                this.currentNode = node\r\n                break\r\n            }\r\n            else if (node.hasChildNodes()) {\r\n                node = this._retrieveNode(id, node.childNodes())\r\n            } else node = null\r\n        }\r\n        return this.currentNode\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieve nodes by key-value couple\r\n     * @param {String} key\r\n     * @param {*|null|undefined} value\r\n     * @param {Array} data\r\n     * @private\r\n     * @returns {Node[]|[]}\r\n     */\r\n    _retrieveNodesBy(key, value, data) {\r\n        let nodes = []\r\n        for (let i = 0; i < data.length; i++) {\r\n            let node = data[i]\r\n            if (node.hasProperty(key) && node.getProperty(key) === value) nodes.push(node)\r\n            if (node.hasChildNodes())\r\n                nodes = nodes.concat(this._retrieveNodesBy(key, value, node.childNodes()))\r\n        }\r\n        return nodes\r\n    }\r\n\r\n    /**\r\n     * Retrieve nodes by depth\r\n     * @param {Number} depth\r\n     * @param {Array} data\r\n     * @param {Number} currentDepth\r\n     * @private\r\n     * @returns {Node[]|[]}\r\n     */\r\n    _retrieveNodesByDepth(depth = 0, data = null, currentDepth = 0) {\r\n        let nodes = []\r\n        for (let i = 0; i < data.length; i++) {\r\n            let node = data[i]\r\n            if (!node.hasParentNode()) currentDepth = 0\r\n            if (depth === currentDepth) nodes.push(node)\r\n            else if (node.hasChildNodes()) nodes = nodes.concat(this._retrieveNodesByDepth(depth, node.childNodes(), currentDepth += 1))\r\n        }\r\n        return nodes\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    _setUniqueId() {\r\n        if (!this._count) this._count = 0\r\n        this._count += 1\r\n        return `${properties.node_id_prefix}${this._count * randomNum()}`\r\n    }\r\n}\r\n\r\nmodule.exports = Nested"]}